
1. Python数据类型
==================================

**姓名: 陈可艺** 

**学号: 14Y17113**

Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。

变量可以存储不同类型的数据，并且不同类型可以执行不同的操作。

Python3 中有六个标准的数据类型：

Number（数字）

String（字符串）

List（列表）

Tuple（元组）

Set（集合）

Dictionary（字典）

Python3 的六个标准数据类型中：

不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；


**查看数据类型的方法**

Python中可以使用 type() 函数获取和查看任何对象的数据类型，例如：

>>> a, b, c, d = 20, 5.5, True, 4+3j
>>> print(type(a), type(b), type(c), type(d))

结果显示为：

>>> <class 'int'> <class 'float'> <class 'bool'> <class 'complex'>

也可以直接在 type()函数中输入数据来查看数据类型，例如：

>>> type("DataScience")

输出结果如下：

>>> str


**判断数据类型的方法**

Python中可以使用 isinstance() 函数判断任何对象的数据类型，例如：

>>> y=10.0
>>> isinstance(y,int)

结果显示为：

>>> False

注意：isinstance 和 type 的区别在于：

type()不会认为子类是一种父类类型。

isinstance()会认为子类是一种父类类型。

>>> class A:
>>> pass
>>> class B(A):
>>> pass 
>>> isinstance(A(), A)
>>> True
>>> type(A()) == A 
>>> True
>>> isinstance(B(), A)
>>> True
>>> type(B()) == A
>>> False


**设置数据类型的方法**

在Python3 中，当用等号 (=)为变量赋值时，会设置数据类型，而不是像静态语言在定义变量时就必须指定变量类型。等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：

>>>  x = 100          # 整型变量 
>>>  y   = 1000.0       # 浮点型变量
>>>  name    = "hello world"     #字符串  
>>>  print (x)  
>>>  print (y) 
>>>  print (name)

执行以上程序会输出如下结果：

>>> 100
>>> 1000.0
>>> hello world

注意：

 1、Python可以同时为多个变量赋值，如a, b = 1, 2。
 
 2、一个变量可以通过赋值指向不同类型的对象。
 

**数据类型的转换方法**

在Python3 中，如果希望指定数据类型或对数据类型进行转换，则可以使用以下构造函数，例如：

>>> x = float（28）

表示将x转换为一个浮点数，此时x值为：28.0

又如：

>>> bool(0)

将0转换为布尔值，输出结果为：False


1.1 Number（数字）
---------------------------
Python 数字数据类型用于存储数值。

Python 支持三种不同的数值类型：

整型(int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。

浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）

复数(complex) - 复数由实数部分和虚数部分构成，可以用a + bj, 或者 complex (a,b)表示， 复数的实部a和虚部b都是浮点型。


为变量赋值时，将创建数值类型的变量：

实例

>>> x = 10    # int
>>> y = 6.3  # float
>>> z = 2j   # complex


**数值运算**

Python 解释器可以作为一个简单的计算器，我们可以在解释器里输入一个表达式，它将输出表达式的值。

实例

>>> 5 + 4  # 加法 
>>> 9
>>> 4.3 - 2 # 减法
>>> 2.3  
>>> 3 * 7  # 乘法
>>> 21
>>> 2 / 4  # 除法，得到一个浮点数
>>> 0.5
>>> 2 // 4 # 除法，得到一个整数
>>> 0
>>> 17 % 3 # 取余
>>> 2
>>> 2 ** 5 # 乘方
>>> 32

小结：

 1、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数（即只得到整数的结果，丢弃可能的分数部分）。但 // 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。
 
 2、整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。
 
 3、在混合计算时，Python会把整型转换成为浮点数。 

 
1.2 String（字符串）
---------------------------
Python中的字符串用单引号 ' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字符。

字符串的截取的语法格式如下：

>>> 变量[头下标:尾下标]

截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。

索引值以 0 为开始值，-1 为从末尾的开始位置。

**字符串更新**

Python 中可以截取字符串的一部分并与其他字段拼接

加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，与之结合的数字为复制的次数。

实例

>>> str = 'Google'

>>> print (str)          # 输出字符串
>>> print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
>>> print (str[0])       # 输出字符串第一个字符
>>> print (str[2:5])     # 输出从第三个开始到第五个的字符
>>> print (str[2:])      # 输出从第三个开始的后的所有字符
>>> print (str * 2)      # 输出字符串两次，也可以写成 print (2 * str)
>>> print (str + "TEST") # 连接字符串
执行以上程序会输出如下结果：

>>> Google
>>> Googl
>>> G
>>> ogl
>>> ogle
>>> GoogleGoogle
>>> GoogleTEST

注意：Python 没有单独的字符类型，一个字符就是长度为1的字符串。

实例

>>> word = 'Python'
>>> print(word[0], word[5])
>>> P n
>>> print(word[-1], word[-6])
>>> n P

与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。

**检查字符串**

Python 中如需检查字符串中是否存在特定短语或字符，我们可以使用 in 或 not in 关键字。

实例

>>> txt = "China is a great country"
>>> x = "ina" in txt
>>> print(x)

结果如下：

>>> True

**字符串长度**

Python 中如需获取字符串的长度，可以使用 len() 函数返回字符串的长度。

实例

>>> a = "Hello, World!"
>>> print(len(a))

结果如下：

>>> 13

小结：

   1、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
   
   2、字符串的截取遵循左闭右开原则。
   
   3、字符串可以用+运算符连接在一起，用*运算符重复。
   
   4、Python中的字符串不能改变。
   
   
1.3 List（列表）
---------------------------

Python 编程语言中有四种集合数据类型：

    列表（List）是一种有序和可更改的集合。允许重复的成员。
    
    元组（Tuple）是一种有序且不可更改的集合。允许重复的成员。
    
    集合（Set）是一个无序和无索引的集合。没有重复的成员。
    
    词典（Dictionary）是一个无序，可变和有索引的集合。没有重复的成员。

List（列表） 是 Python 中使用最频繁的数据类型。

列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。

列表是写在方括号 [] 之间、用逗号分隔开的元素列表。如下所示：

>>> list1 = ['Google', 'Apple', 2019, 2020]
>>> list2 = [1, 2, 3, 4, 5 ]
>>> list3 = ["a", "b", "c", "d"]

**列表截取与拼接**

和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。

列表截取的语法格式如下：

>>> 变量[头下标:尾下标]

列表索引值以 0 为开始值，-1 为从末尾的开始位置。负向索引是从 -1 到 -n。

加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：

实例

>>> list = [ 'abcd', 786 , 2.23, 'google', 70.2 ]
>>> tinylist = [123, 'google']

>>> print (list)            # 输出完整列表
>>> print (list[0])         # 输出列表第一个元素
>>> print (list[1:3])       # 从第二个开始输出到第三个元素
>>> print (list[2:])        # 输出从第三个元素开始的所有元素
>>> print (tinylist * 2)    # 输出两次列表
>>> print (list + tinylist) # 连接列表

以上实例输出结果：

>>> ['abcd', 786, 2.23, 'google', 70.2]
>>> abcd
>>> [786, 2.23]
>>> [2.23, 'google', 70.2]
>>> [123, 'google', 123, 'google']
>>> ['abcd', 786, 2.23, 'google', 70.2, 123, 'google']

**合并两个列表**

在 Python 中，除了上述提到的 + 运算符，还有几种方法可以连接或串联两个或多个列表。

方法一： + 运算符。

实例

>>> list1 = ["a", "b" , "c"]
>>> list2 = [1, 2, 3]

>>> list3 = list1 + list2

>>> print(list3)

以上实例输出结果：

>>> ['a', 'b', 'c', 1, 2, 3]

方法二：用 append() 添加元素，将 list2 中的所有项一个接一个地追加到 list1 中。

实例

>>> list1 = ["a", "b" , "c"]
>>> list2 = [1, 2, 3]

>>> for x in list2:
>>>   list1.append(x)

>>> print(list1)

输出结果：

>>> ['a', 'b', 'c', 1, 2, 3]

方法三：可以使用 extend() 列表加法，其目的是将一个列表中的元素添加到另一列表的末尾。

实例

>>> list1 = ["a", "b" , "c"]
>>> list2 = [1, 2, 3]

>>> list1.extend(list2)
>>> print(list1)

输出结果：

>>> ['a', 'b', 'c', 1, 2, 3]

**更新列表**

与字符串不一样的是，列表中的元素是可以改变的：

实例

>>> a = [1, 2, 3, 4, 5, 6]
>>> a[0] = 9
>>> a[2:5] = [13, 14, 15]
>>> a
>>> [9, 2, 13, 14, 15, 6]
>>> a[2:5] = []   # 将对应的元素值设置为 []
>>> a
>>> [9, 2, 6]


小结：

   1、List写在方括号之间，元素用逗号隔开。
   
   2、和字符串一样，list可以被索引和切片。
   
   3、List可以使用+操作符进行拼接，还可以使用 append()、 extend() 合并多个列表。
   
   4、List中的元素是可以改变的。
   

   
1.4 Tuple（元组）
---------------------------
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。

元组中的元素类型也可以不相同：

实例

>>> tuple = ( 'abcd', 786 , 2.23, 'Google', 70.2  )
>>> tinytuple = (123, 'Google')

>>> print (tuple)             # 输出完整元组
>>> print (tuple[0])          # 输出元组的第一个元素
>>> print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
>>> print (tuple[2:])         # 输出从第三个元素开始的所有元素
>>> print (tinytuple * 2)     # 输出两次元组
>>> print (tuple + tinytuple) # 连接元组

以上实例输出结果：

>>> ('abcd', 786, 2.23, 'Google', 70.2)
>>> abcd
>>> (786, 2.23)
>>> (2.23, 'Google', 70.2)
>>> (123, 'Google', 123, 'Google')
>>> ('abcd', 786, 2.23, 'Google', 70.2, 123, 'Google')

元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。

其实，可以把字符串看作一种特殊的元组。

实例

>>> tup = (1, 2, 3, 4, 5, 6)
>>> print(tup[0])
>>> 1
>>> print(tup[1:5])
>>> (2, 3, 4, 5)
>>> tup[0] = 11  # 修改元组元素的操作是非法的
>>> Traceback (most recent call last):
>>>   File "<stdin>", line 1, in <module>
>>> TypeError: 'tuple' object does not support item assignment
>>>

虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。

构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：

>>> tup1 = ()    # 空元组
>>> tup2 = (20,) # 一个元素，需要在元素后添加逗号
>>> string、list 和 tuple 都属于 sequence（序列）。

小结：

    1、与字符串一样，元组的元素不能修改。
    
    2、元组也可以被索引和切片，方法一样。
    
    3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
    
    4、元组也可以使用+操作符进行拼接。
	
	
	
1.5 Set（集合）
---------------------------
集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。

基本功能是进行成员关系测试和删除重复元素。

可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。

创建格式：

>>> parame = {value01,value02,...}

或者

>>> set(value)

实例

>>> sites = {'Google', 'Taobao', 'Apple', 'Facebook', 'Zhihu', 'Baidu'}
>>>
>>> print(sites)   # 输出集合，重复的元素被自动去掉
>>>
>>> # 成员测试
>>> if 'Apple' in sites :
>>>     print('Apple 在集合中')
>>> else :
>>>     print('Apple 不在集合中')
>>>
>>>
>>> # set可以进行集合运算
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>>
>>> print(a)
>>>
>>> print(a - b)     # a 和 b 的差集
>>>
>>> print(a | b)     # a 和 b 的并集
>>>
>>> print(a & b)     # a 和 b 的交集
>>>
>>> print(a ^ b)     # a 和 b 中不同时存在的元素

以上实例输出结果：

>>> {'Zhihu', 'Baidu', 'Taobao', 'Apple', 'Google', 'Facebook'}
>>> Apple 在集合中
>>> {'b', 'c', 'a', 'r', 'd'}
>>> {'r', 'b', 'd'}
>>> {'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'}
>>> {'c', 'a'}
>>> {'z', 'b', 'm', 'r', 'l', 'd'}


1.6 Dictionary（字典）
---------------------------
字典（dictionary）是Python中另一个非常有用的内置数据类型。

列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。

字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。

键(key)必须使用不可变类型。

在同一个字典中，键(key)必须是唯一的。

实例

>>> dict = {}
>>> dict['one'] = "1 - 教程"
>>> dict[2]     = "2 - 工具"
>>>
>>> tinydict = {'name': 'Apple','code':1, 'site': 'www.Apple.com'}
>>>
>>>
>>> print (dict['one'])       # 输出键为 'one' 的值
>>> print (dict[2])           # 输出键为 2 的值
>>> print (tinydict)          # 输出完整的字典
>>> print (tinydict.keys())   # 输出所有键
>>> print (tinydict.values()) # 输出所有值

以上实例输出结果：

>>> 1 - 教程
>>> 2 - 工具
>>> {'name': 'Apple', 'code': 1, 'site': 'www.Apple.com'}
>>> dict_keys(['name', 'code', 'site'])
>>> dict_values(['Apple', 1, 'www.Apple.com'])

构造函数 dict() 可以直接从键值对序列中构建字典如下：

实例

>>> dict([('Apple', 1), ('Google', 2), ('Taobao', 3)])
>>> {'Apple': 1, 'Google': 2, 'Taobao': 3}
>>> {x: x**2 for x in (2, 4, 6)}
>>> {2: 4, 4: 16, 6: 36}
>>> dict(Apple=1, Google=2, Taobao=3)
>>> {'Apple': 1, 'Google': 2, 'Taobao': 3}
>>>

另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。

小结：

   1、字典是一种映射类型，它的元素是键值对。
   
   2、字典的关键字必须为不可变类型，且不能重复。
   
   3、创建空字典使用 { }。


1.7 特殊数据类型
-----------------------
**Bool 布尔**

布尔表示两值之一：True 或 False。

如果有某种内容，则大多数值都为 True。

除空字符串外，任何字符串均为 True。

除 0 外，任何数字均为 True。

除空列表外，任何列表、元组、集合和字典均为 True。

实例如下：

>>> bool("abc")
>>> bool(123)
>>> bool(["apple", "cherry", "banana"])

某些值为 False , 包括空值（例如 ()、[]、{}、""、数字 0 和值 None）。当然，值 False 的计算结果为 False。

Python3 中将 True 和 False 定义成关键字，它们的值是 1 和 0，它们可以和数字相加。

布尔值的应用包括：

1. 比较两个值时，将对表达式求值，Python 返回布尔值答案：

实例

>>> print(8 > 7)
>>> print(8 == 7)
>>> print(8 > 7)

结果如下：

>>> True
>>> False
>>> False

2. 当在 if 语句中运行判断条件时，Python 返回 True 或 False：

实例

>>> a = 200
>>> b = 33

>>> if b > a:
>>>   print("b is greater than a")
>>> else:
>>>   print("b is not greater than a")

结果如下：

>>> b is not greater than a